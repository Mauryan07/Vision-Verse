<!DOCTYPE html>
<html lang="en">

<head>
  <meta charset="utf-8">
  <title>Model</title>

  <link rel="stylesheet" href="/index.css">

  <script async src="https://unpkg.com/es-module-shims@1.6.3/dist/es-module-shims.js"></script>
  <script type="importmap">
      {
        "imports": {
          "three": "https://unpkg.com/three@v0.153.0/build/three.module.js",
          "three/addons/": "https://unpkg.com/three@v0.153.0/examples/jsm/"
        }
      }
    </script>
</head>

<body>
  <!-- <div id="heading">
      <h1>THE MILLENNIUM FALCON</h1>
      <div class="border"></div>
    </div> -->
  <div id="progress-container">
    <div id="progress">Please Wait</div>
  </div>
  <script type="module" >
    import * as THREE from 'three';
    import { GLTFLoader } from 'three/addons/loaders/GLTFLoader.js';
    import { OrbitControls } from 'three/addons/controls/OrbitControls.js';

    const renderer = new THREE.WebGLRenderer({ antialias: true });
    renderer.outputColorSpace = THREE.SRGBColorSpace;

    renderer.setSize(window.innerWidth, window.innerHeight);
    renderer.setClearColor(0xdedede);
    renderer.setPixelRatio(window.devicePixelRatio);

    renderer.shadowMap.enabled = true;
    renderer.shadowMap.type = THREE.PCFSoftShadowMap;

    document.body.appendChild(renderer.domElement);

    const scene = new THREE.Scene();

    const camera = new THREE.PerspectiveCamera(45, window.innerWidth / window.innerHeight, 1, 1000);
    camera.position.set(4, 5, 11);
    

    // const controls = new OrbitControls(camera, renderer.domElement);
    // controls.enableDamping = true;
    // controls.enablePan = false;
    // controls.minDistance = 5;
    // controls.maxDistance = 20;
    // controls.minPolarAngle = 0.5;
    // controls.maxPolarAngle = 1.5;
    // controls.autoRotate = false;
    // controls.target = new THREE.Vector3(0, 1, 0);
    // controls.update();
    const controls = new OrbitControls(camera, renderer.domElement);
    controls.enableDamping = true;
    controls.enablePan = false;
    controls.minDistance = 1;
    controls.maxDistance = 1.09;
    controls.minPolarAngle = 0.5;
    controls.maxPolarAngle = 1.5;
    controls.autoRotate = false;
    controls.target = new THREE.Vector3(0, 0, 0);
    controls.update();

    // const groundGeometry = new THREE.PlaneGeometry(20, 20, 32, 32);
    // groundGeometry.rotateX(-Math.PI / 2);
    // const groundMaterial = new THREE.MeshStandardMaterial({
    //   color: 0x555555,
    //   side: THREE.DoubleSide
    // });
    // const groundMesh = new THREE.Mesh(groundGeometry, groundMaterial);
    // groundMesh.castShadow = false;
    // groundMesh.receiveShadow = true;
    //scene.add(groundMesh);

    const spotLight = new THREE.SpotLight(0xffffff, 3, 100, 0.22, 2);
    spotLight.position.set(25, 25, 25);
    spotLight.castShadow = true;
    spotLight.shadow.bias = -0.0001;
    scene.add(spotLight);

    const loader = new GLTFLoader().setPath('/data/');
    loader.load('<%= model %>', (gltf) => {
      const mesh = gltf.scene;

      mesh.traverse((child) => {
        if (child.isMesh) {
          // child.castShadow = true;
          child.receiveShadow = true;
        }
      });

      // mesh.position.set(0, 1.05, -1);
      // scene.add(mesh);
      mesh.position.set(0, 0, 0);
      scene.add(mesh);

      document.getElementById('progress-container').style.display = 'none';
    }, (xhr) => {
      document.getElementById('progress').innerHTML = `LOADING ${Math.max(xhr.loaded / xhr.total, 1) * 100}/100`;
    },);

    window.addEventListener('resize', () => {
      camera.aspect = window.innerWidth / window.innerHeight;
      camera.updateProjectionMatrix();
      renderer.setSize(window.innerWidth, window.innerHeight);
    });

    function animate() {
      requestAnimationFrame(animate);
      controls.update();
      renderer.render(scene, camera);
    }

    animate();
  </script>
</body>

</html>